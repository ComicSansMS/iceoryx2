# Copyright (c) 2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache Software License 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0, or the MIT license
# which is available at https://opensource.org/licenses/MIT.
#
# SPDX-License-Identifier: Apache-2.0 OR MIT

cmake_minimum_required(VERSION 3.28)
project(iceoryx2-c VERSION ${IOX2_VERSION_STRING} LANGUAGES C)

set(PREFIX iceoryx2/v${CMAKE_PROJECT_VERSION})

#
########## Rust target ##########
#

set(RUST_BUILD_TYPE "release")
set(RUST_BUILD_TYPE_FLAG "--${RUST_BUILD_TYPE}")
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(RUST_BUILD_TYPE "debug")
    set(RUST_BUILD_TYPE_FLAG "")
endif()

set(RUST_ARCH_TRIPLET "")
set(RUST_ARCH_TRIPLET_FLAG "")
# if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i486")
#     set(RUST_ARCH_TRIPLET "i686-unknown-linux-gnu")
#     set(RUST_ARCH_TRIPLET_FLAG "--target=${RUST_ARCH_TRIPLET}")
# elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "armv7l")
#     set(RUST_ARCH_TRIPLET "armv7-unknown-linux-gnueabihf")
#     set(RUST_ARCH_TRIPLET_FLAG "--target=${RUST_ARCH_TRIPLET}")
# elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "aarch64")
#     set(RUST_ARCH_TRIPLET "${CMAKE_SYSTEM_PROCESSOR}-unknown-linux-gnu")
#     set(RUST_ARCH_TRIPLET_FLAG "--target=${RUST_ARCH_TRIPLET}")
# endif()

set(RUST_TARGET_DIR ${CMAKE_BINARY_DIR}/rust)
set(RUST_ARCH_TARGET_DIR ${RUST_TARGET_DIR}/${RUST_ARCH_TRIPLET})

set(ICEORYX2_C_INCLUDE_DIR ${RUST_ARCH_TARGET_DIR}/${RUST_BUILD_TYPE}/iceoryx2-ffi-cbindgen/include)

set(ICEORYX2_C_LIB iceoryx2_ffi)
set(ICEORYX2_C_STATIC_LIB_LINK_NAME lib${ICEORYX2_C_LIB}.a)
set(ICEORYX2_C_SHARED_LIB_LINK_NAME lib${ICEORYX2_C_LIB}.so)
if(WIN32 AND MSVC)
    set(ICEORYX2_C_STATIC_LIB_LINK_NAME ${ICEORYX2_C_LIB}.lib)
    set(ICEORYX2_C_SHARED_LIB_LINK_NAME ${ICEORYX2_C_LIB}.dll.lib)
elseif(WIN32 AND NOT MSVC)
    set(ICEORYX2_C_STATIC_LIB_LINK_NAME lib${ICEORYX2_C_LIB}.a)
    set(ICEORYX2_C_SHARED_LIB_LINK_NAME lib${ICEORYX2_C_LIB}.dll.a)
elseif(APPLE)
    # NOTE the libiceoryx2_ffi.dylib generated by has a dependency to the build directory as can be observed
    # with 'otool -L libiceoryx2_ffi.dylib'; we need to find a way to fix this; see also #233
    set(ICEORYX2_C_SHARED_LIB_LINK_NAME lib${ICEORYX2_C_LIB}.dylib)
endif()

set(ICEORYX2_C_STATIC_LIB_LINK_FILE ${RUST_ARCH_TARGET_DIR}/${RUST_BUILD_TYPE}/${ICEORYX2_C_STATIC_LIB_LINK_NAME})
set(ICEORYX2_C_SHARED_LIB_LINK_FILE ${RUST_ARCH_TARGET_DIR}/${RUST_BUILD_TYPE}/${ICEORYX2_C_SHARED_LIB_LINK_NAME})
set(ICEORYX2_C_SHARED_LIB_DLL_FILE) # intentionally empty; only used on Windows

list(APPEND ICEORYX2_C_LIB_ARTIFACTS ${ICEORYX2_C_STATIC_LIB_LINK_FILE})
list(APPEND ICEORYX2_C_LIB_ARTIFACTS ${ICEORYX2_C_SHARED_LIB_LINK_FILE})
if(WIN32)
    set(ICEORYX2_C_SHARED_LIB_DLL_FILE ${RUST_ARCH_TARGET_DIR}/${RUST_BUILD_TYPE}/${ICEORYX2_C_LIB}.dll)
    list(APPEND ICEORYX2_C_LIB_ARTIFACTS ${ICEORYX2_C_SHARED_LIB_DLL_FILE})
endif()

# run cargo
add_custom_target(
    iceoryx2-build-step ALL
    COMMAND cargo build ${RUST_BUILD_TYPE_FLAG} --target-dir=${RUST_TARGET_DIR} ${RUST_ARCH_TRIPLET_FLAG}
    BYPRODUCTS
        ${ICEORYX2_C_INCLUDE_DIR}/iox2/iceoryx2.h
        ${ICEORYX2_C_STATIC_LIB_LINK_FILE}
        ${ICEORYX2_C_SHARED_LIB_LINK_FILE}
        ${ICEORYX2_C_SHARED_LIB_DLL_FILE}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    VERBATIM
    USES_TERMINAL
)

#
########## C target ##########
#

# include lib

add_library(includes-only INTERFACE)
add_library(iceoryx2-c::includes-only ALIAS includes-only)

add_dependencies(includes-only iceoryx2-build-step)

target_include_directories(includes-only
    INTERFACE
    $<BUILD_INTERFACE:${ICEORYX2_C_INCLUDE_DIR}>
    $<INSTALL_INTERFACE:include/${PREFIX}>
)

# static lib

add_library(static-lib INTERFACE)
add_library(iceoryx2-c::static-lib ALIAS static-lib)

add_library(shared-lib INTERFACE)
add_library(iceoryx2-c::shared-lib ALIAS shared-lib)


# NOTE the solution with specifying a 'BUILD_INTERFACE' and a 'INSTALL_INTERFACE' was the only one that worked;
# alternatively an imported library could be created, e.g. 'iceoryx2_ffi' with a corresponding alias, e.g. 'iceoryx2::ffi';
# the imported lib needs to be present here and also in 'Config.cmake.in' but they need to be named differently, e.g.
# 'iceoryx2_ffi_imported' in 'Config.cmake.in' but with the same alias, e.g 'iceoryx2::ffi';
# the 'target_link_libraries' would then depend on 'iceoryx2::ffi'
include(GNUInstallDirs)
target_link_libraries(static-lib INTERFACE
    iceoryx2-c::includes-only
    $<BUILD_INTERFACE:${ICEORYX2_C_STATIC_LIB_LINK_FILE}>
    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}/${ICEORYX2_C_STATIC_LIB_LINK_NAME}>
    $<$<NOT:$<PLATFORM_ID:Windows>>:m>
    $<$<AND:$<PLATFORM_ID:Windows>,$<C_COMPILER_ID:MSVC>>:bcrypt ntdll synchronization ws2_32 wsock32>
    $<$<AND:$<PLATFORM_ID:Windows>,$<NOT:$<C_COMPILER_ID:MSVC>>>:ntdll ws2_32 wsock32>
    $<$<PLATFORM_ID:Darwin>:stdc++>
)
target_link_libraries(shared-lib INTERFACE
    iceoryx2-c::includes-only
    $<BUILD_INTERFACE:${ICEORYX2_C_SHARED_LIB_LINK_FILE}>
    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}/${ICEORYX2_C_SHARED_LIB_LINK_NAME}>
)

include(cmake/install.cmake)
